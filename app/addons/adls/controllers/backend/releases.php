<?php
/**
 * HELOstore
 *
 * This source file is part of a commercial software. Only users who have purchased a valid license through
 * https://helostore.com/ and accepted to the terms of the License Agreement can install this product.
 *
 * @category   Add-ons
 * @package    HELOstore
 * @copyright  Copyright (c) 2015-2016 HELOstore. (https://helostore.com/)
 * @license    https://helostore.com/legal/license-agreement/   License Agreement
 * @version    $Id$
 */

use HeloStore\ADLS\Compatibility\Compatibility;
use HeloStore\ADLS\Compatibility\CompatibilityRepository;
use HeloStore\ADLS\Platform\PlatformRepository;
use HeloStore\ADLS\Platform\PlatformVersionRepository;
use HeloStore\ADLS\ProductManager;
use HeloStore\ADLS\ProductRepository;
use HeloStore\ADLS\ReleaseManager;
use HeloStore\ADLS\ReleaseRepository;
use HeloStore\ADLS\Source\SourceFileRepository;
use HeloStore\ADLS\Source\SourceRepository;
use HeloStore\Developer\ReleaseManager AS DeveloperReleaseManager;
use Tygh\Registry;


if ( ! defined('BOOTSTRAP')) {
    die('Access denied');
}

$productManager = ProductManager::instance();
$sourceRepository = SourceRepository::instance();
$productRepository = ProductRepository::instance();
$platformRepository = PlatformRepository::instance();


if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    if ($mode == 'update') {
        $releaseId = ! empty($_REQUEST['release_id']) ? $_REQUEST['release_id'] : 0;

        $productId = $_REQUEST['productId'];
        $platformId = $_REQUEST['platformId'];
        $releaseVersion = $_REQUEST['release']['version'];

        $platform = $platformRepository->findOneById($platformId);
        $product = $productRepository->findOneById($productId);
        $productManager->hydrateProductWithReleases($product, $platform);

        $source = $sourceRepository->findOne(array(
            'productId' => $productId,
            'platformId' => $platformId
        ));




        if (empty($releaseId)) {
//            if ($platform->isCSCart()) {
//                $addonId = $product['adls_slug'];
//                if (empty($addonId)) {
//                    throw new \Exception('Addon ID not specified');
//                }
//
//                // app/addons/developer/controllers/backend/addons.post.php:106
//                $manager = DeveloperReleaseManager::instance();
//                if ($manager->pack($addonId, $output)) {
//                    fn_set_notification('N', __('notice'), 'Packed to ' . $output['archivePath']);
//
//                    // attempt to release the newly packed add-on
//                    $releaseId = null;
//                    try {
//                        $releaseId = $manager->release($addonId, $output);
//                    } catch (\Exception $e) {
//                        fn_set_notification('W', __('warning'), $e->getMessage(), 'I');
//                    }
//                    if ($releaseId !== null) {
//                        if ($releaseId) {
//                            fn_set_notification('N', __('notice'),
//                                'Attached release to product: ' . $output['archivePath']);
//                        } else {
//                            fn_set_notification('E', __('error'),
//                                'Failed attaching release to product: ' . $output['archivePath']);
//                        }
//                    }
//                } elseif ($manager->hasErrors()) {
//                    foreach ($manager->getErrors() as $error) {
//                        fn_set_notification('E', __('error'), $error);
//                    }
//                }
//            } else {
//            }

	        // Try to find a build file generated by the cli tool.
	        $releaseAbsolutePath = SourceFileRepository::instance()->findReleaseFile($product['adls_slug'], $platform->getSlug(), $releaseVersion);
	        if (false !== $releaseAbsolutePath) {
		        $fileName = basename($releaseAbsolutePath);
		        $fileSize = filesize($releaseAbsolutePath);
		        $releaseId = ReleaseManager::instance()->createRelease($productId, $releaseVersion, $fileName, $fileSize, $source->getId());
	        } else {
		        // Otherwise, fail miserably..
		        throw new \Exception("Packing for platform " . $platform->getName() . ' is not supported by Developer Tools. Use the cli command.');
	        }
        }


        $release = \HeloStore\ADLS\ReleaseRepository::instance()->findOneById($releaseId);
        if (empty($release)) {
            throw new \Exception('Unable to find release');
        }

        $productId                  = $release->getProductId();
        $compatiblePlatformVersions = [];
        if (isset($_POST['compatibility'])) {
            $compatiblePlatformVersions = $_POST['compatibility'];
        }

        list($previousCompatibilities,) = CompatibilityRepository::instance()->find(array(
            'releaseId'  => $release->getId(),
            'platformId' => $platform->getId()
        ));

        $previousCompatiblePlatformVersionIds = [];
        if ( ! empty($previousCompatibilities)) {
            $previousCompatiblePlatformVersionIds = array_map(function (Compatibility $compatibility) {
                return $compatibility->getPlatformVersionId();
            }, $previousCompatibilities);
        }

        $deleteIds                 = array_diff($previousCompatiblePlatformVersionIds, $compatiblePlatformVersions);
        $addIds                    = array_diff($compatiblePlatformVersions, $previousCompatiblePlatformVersionIds);
        $platformVersionRepository = PlatformVersionRepository::instance();


        foreach ($deleteIds as $id) {
            CompatibilityRepository::instance()->unassign($releaseId, $id);
        }

        foreach ($addIds as $id) {
            $platformVersion = $platformVersionRepository->findOneById($id);
            CompatibilityRepository::instance()->assign($productId, $releaseId,
                $platformVersion);
        }

        // Copy release assets to public directory
        $productManager->copyAssets($product['adls_slug'], $platform->getSlug());

        return [CONTROLLER_STATUS_REDIRECT, 'releases.update?release_id=' . $releaseId];
    }
}




if ($mode == 'delete' && ! empty($_REQUEST['release_id'])) {
    $release = \HeloStore\ADLS\ReleaseRepository::instance()->findOneById($_REQUEST['release_id']);

    if (empty($release)) {
        return array(CONTROLLER_STATUS_NO_PAGE);
    }

    if (\HeloStore\ADLS\ReleaseRepository::instance()->delete($release)) {
        fn_set_notification('N', __('notice'), 'Release deleted.');
    } else {
        fn_set_notification('E', __('error'), 'Failed deleting release.');
    }

    return array(CONTROLLER_STATUS_REDIRECT, $_SERVER['HTTP_REFERER']);
}





if (($mode == 'publish' || $mode == 'unpublish') && ! empty($_REQUEST['release_id'])) {
    $releaseId = $_REQUEST['release_id'];
    $release   = \HeloStore\ADLS\ReleaseRepository::instance()->findOneById($releaseId);

    if (empty($release)) {
        throw new \Exception('Release not found');
    }

    if ($mode == 'unpublish') {
        list ($premiumCount, $freeCount) = \HeloStore\ADLS\ReleaseManager::instance()->unpublish($release);
        fn_set_notification('N', __('notice'),
            'Un-published from: ' . $premiumCount . ' premium, ' . $freeCount . ' free');
    }

    if ($mode == 'publish') {
        list ($premiumCount, $freeCount) = \HeloStore\ADLS\ReleaseManager::instance()->publish($release);
        fn_set_notification('N', __('notice'), 'Published to: ' . $premiumCount . ' premium, ' . $freeCount . ' free');
    }

    if ( ! empty($_SERVER['HTTP_REFERER'])) {
        return array(CONTROLLER_STATUS_REDIRECT, $_SERVER['HTTP_REFERER']);
    }

    return array(CONTROLLER_STATUS_OK, 'releases.manage');
}

if ($mode == 'download' && ! empty($_REQUEST['release_id'])) {
    $releaseRepository = ReleaseRepository::instance();
    $releaseId         = intval($_REQUEST['release_id']);
    $release           = ReleaseRepository::instance()->findOneById($releaseId);

    if (empty($release)) {
        return array(CONTROLLER_STATUS_NO_PAGE);
    }

    if ( ! ReleaseManager::instance()->download($release)) {
        return array(CONTROLLER_STATUS_NO_PAGE);
    }
    exit;
}










if ($mode == 'add') {
    $releaseId = 0;
    if (empty($_REQUEST['productId']) || empty($_REQUEST['platformId'])) {
        return array(CONTROLLER_STATUS_NO_PAGE);
    }
    $productId = $_REQUEST['productId'];
    $platformId = $_REQUEST['platformId'];


    $platform = $platformRepository->findOneById($platformId);
    $product = $productRepository->findOneById($productId);
    $productManager->hydrateProductWithReleases($product, $platform);
    $source = $sourceRepository->findOne(array(
        'productId' => $productId,
        'platformId' => $platformId
    ));

    Registry::get('view')->assign('productId', $productId);
    Registry::get('view')->assign('platformId', $platformId);
    Registry::get('view')->assign('source', $source);
}

if ($mode == 'update') {
    $releaseId = ! empty($_REQUEST['release_id']) ? $_REQUEST['release_id'] : 0;
    $release   = \HeloStore\ADLS\ReleaseRepository::instance()->findOneById($releaseId);

    if (empty($release)) {
        return array(CONTROLLER_STATUS_NO_PAGE);
    }


    $productId      = $release->getProductId();
    if (empty($release->getSourceId())) {
        throw new \Exception('Release has no source');
    }
    $source = $sourceRepository->findOneById($release->getSourceId());
    $platformId = $source->getPlatformId();
    $platform = $platformRepository->findOneById($platformId);
    $product = $productRepository->findOneById($productId);
    $productManager->hydrateProductWithReleases($product, $platform);

    Registry::get('view')->assign('productId', $productId);
    Registry::get('view')->assign('platformId', $platformId);
    Registry::get('view')->assign('release', $release);
    Registry::get('view')->assign('source', $source);
}

if ($mode == 'update' || $mode == 'add') {

//    $products = $productManager->getStoreProductsData();
//    $product  = $products[$addonId];
//    if ($mode == 'add' && !$product['has_unreleased_version']) {
//        fn_set_notification('W', __('warning'), 'This product has no unreleased versions. Suggestion: update latest version instead (it will be repacked as well)');
//
//        return [CONTROLLER_STATUS_REDIRECT, 'releases.manage?id=' . $addonId];
//    }
    Registry::get('view')->assign('product', $product);

    list($availablePlatformVersions,) = PlatformVersionRepository::instance()->findByPlatformId($platform->getId(), [
        'items_per_page' => 100
    ]);
    Registry::get('view')->assign('availablePlatformVersions', $availablePlatformVersions);
    Registry::get('view')->assign('platform', $platform);

    $compatibilities = [];
    if ( ! empty($release)) {
        list($compatibilities,) = CompatibilityRepository::instance()->find(array(
            'releaseId'  => $release->getId(),
            'platformId' => $platform->getId()
        ));
    }

    Registry::get('view')->assign('compatibilities', $compatibilities);

    $compatiblePlatformVersionIds = [];
    if ( ! empty($compatibilities)) {
        $compatiblePlatformVersionIds = array_map(function (Compatibility $compatibility) {
            return $compatibility->getPlatformVersionId();
        }, $compatibilities);
    }
    Registry::get('view')->assign('compatiblePlatformVersionIds', $compatiblePlatformVersionIds);
}


if ($mode == 'overview') {

    list($platforms, ) = $platformRepository->find();
    Registry::get('view')->assign('platforms', $platforms);

    if (empty($_REQUEST['platformId'])) {
        return;
    }
    $platform = $platformRepository->findOneById($_REQUEST['platformId']);
    Registry::get('view')->assign('platform', $platform);

    $source = $sourceRepository->findOne(array(
        'productId' => $productId,
        'platformId' => $platformId
    ));
    Registry::get('view')->assign('source', $source);

//    $products = $productManager->getStoreProductsData();
//    Registry::get('view')->assign('products', $products);

//    $sourceFileRepository = \HeloStore\ADLS\Source\SourceFileRepository::instance();
//    $sourceFileRepository->find
    list($products, ) = $productRepository->findBySourcePlatformId($platform->getId());
    $productManager->hydrateProductsWithReleases($products, $platform);
    Registry::get('view')->assign('products', $products);
}





if ($mode == 'manage' && ! empty($_REQUEST['productId'])) {

    $productId = $_REQUEST['productId'];
    $product = ProductRepository::instance()->findOneById($productId);
    if (empty($product)) {
        return array(CONTROLLER_STATUS_NO_PAGE);
    }

    $platformId = $_REQUEST['platformId'];
    $source = $sourceRepository->findOne(array(
        'productId' => $productId,
        'platformId' => $platformId
    ));
    Registry::get('view')->assign('source', $source);


    $platform = $platformRepository->findOneById($platformId);
    Registry::get('view')->assign('platform', $platform);

    $productManager->hydrateProductWithReleases($product, $platform);
    /** @var \HeloStore\ADLS\Release $release */
    foreach ($product['releases'] as $release) {
        $compatibilities = [];
        if ( ! empty($release)) {
            list($compatibilities, ) = CompatibilityRepository::instance()->find(array(
                'releaseId' => $release->getId(),
                'platformId' => $platform->getId()
            ));
            $release->setCompatibility($compatibilities);
        }
    }

    Registry::get('view')->assign('product', $product);

    $usage = \HeloStore\ADLS\Usage::productPlatforms($product['adls_slug']);
    \Tygh\Registry::get('view')->assign('usage', $usage);

    $usage = \HeloStore\ADLS\Usage::productVersions($product['adls_slug']);
    \Tygh\Registry::get('view')->assign('usageProductVersions', $usage);
}

